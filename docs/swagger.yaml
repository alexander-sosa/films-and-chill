swagger: "2.0"
info:
  description: "This is a Film Store API made to control inventories, stock, 
                available movies and sales records."
  version: "1.0.0"
  title: "Films & Chill"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "movie"
  description: "Operations about movies"
- name: "user"
  description: "Operations about users"

schemes:
- "http"

# Endpoints
paths:
  /movie:
    get:
      tags:
        - "movie"
      summary: "Get all movies registered on the store"
      description: "Returns a list of all the movies available on the store"
      operationId: "getFilms"
      produces:
        - "application/json"
      parameters:
        - name: "genre_id"
          in: "query"
          description: "Genre ID\n\nSample: /movie?genre_id=1"
          type: "integer"
          required: false
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MovieResponseArray"

    post:
      tags:
        - "movie"
      summary: "Add a new movie"
      description: "Create a new movie register"
      operationId: "createMovie"
      produces:
        - "text/html"
      parameters:
        - name: "body"
          in: "body"
          description: "Information about the movie"
          required: true
          schema:
            $ref: "#/definitions/CreateMovieRequest"
      responses:
        "201":
          description: "Movie created succesfully"
        "400":
          description: "Invalid data supplied"

  /movie/{movie_id}:
    get:
      tags:
        - "movie"
      summary: "Get a specific movie"
      description: "Returns an object of the movie specified"
      operationId: "getFilm"
      produces:
        - "application/json"
      parameters:
        - name: "movie_id"
          in: "path"
          description: "ID of the movie to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/MovieResponse"
        "404":
          description: "Movie not found"

    put:
      tags:
        - "movie"
      summary: "Edit data of a specific movie"
      description: "Edit a movie register"
      operationId: "updateMovie"
      produces:
        - "text/html"
      parameters:
        - name: "movie_id"
          in: "path"
          description: "ID of the movie to edit"
          required: true
          type: "integer"
          format: "int64"
        - name: "body"
          in: "body"
          description: "Information about the movie. Just use the parameters you need to edit."
          required: true
          schema:
            $ref: "#/definitions/UpdateMovieRequest"
      responses:
        "201":
          description: "Movie updated succesfully"
        "400":
          description: "Invalid data supplied"

  /movie/{movie_id}/actor:
    get:
      tags:
        - "movie"
      summary: "Get the actors for a specific movie"
      description: "Returns a list of actors"
      operationId: "getFilmActors"
      produces:
        - "application/json"
      parameters:
        - name: "movie_id"
          in: "path"
          description: "ID of the movie to retrieve"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ActorResponseArray"
        "400":
          description: "Invalid ID"

  /movie/genre:
    get:
      tags:
        - "movie"
      summary: "Get a list of the available movie genres"
      description: "Returns a list of all the movie genres available on the store"
      operationId: "getGenres"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GenreResponseArray"

  /user:
    post:
      tags:
        - "user"
      summary: "Create a new user"
      description: "Sign up endpoint"
      operationId: "createUser"
      produces:
        - "text/html"
      parameters:
        - name: "body"
          in: "body"
          description: "Information about the user"
          required: true
          schema:
            $ref: "#/definitions/CreateUserRequest"
      responses:
        "201":
          description: "User created succesfully"
        "400":
          description: "Invalid data supplied"

    get:
      tags:
        - "user"
      summary: "Show all users"
      description: "Returns a list of users"
      operationId: "getUsers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UsersResponseArray"
        "401":
          description: "Unauthorized (login first)"
        "403":
          description: "Forbidden (user permission)"

  /user/permission:
    put:
      tags:
        - "user"
      summary: "Update a user permission"
      description: "Change a user's permission. The 'permission' field on body parameter must be 'admin' or 'client', otherwise a 400 error will raise."
      operationId: "updatePermission"
      produces:
        - "text/html"
      parameters:
        - name: "body"
          in: "body"
          description: "Information about the user and the permission"
          required: true
          schema:
            $ref: "#/definitions/UpdatePermissionRequest"
      responses:
        "200":
          description: "Permission updated"
        "400":
          description: "Invalid data supplied"

  /auth:
    post:
      tags:
        - "user"
      summary: "Validate an existing user"
      description: "Log in endpoint"
      operationId: "logIn"
      produces:
        - "text/html"
      parameters:
        - name: "body"
          in: "body"
          description: "User credentials"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: "Login success"
        "403":
          description: "Invalid credentials"

# Security Definitions
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
# Object Definitions
definitions:
  MovieResponse:
    type: "object"
    properties:
      movie_id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      description:
        type: "string"
      release_year:
        type: "integer"
        format: "int32"
      cost:
        type: "number"
      rating:
        type: "string"
      genre:
        type: "string"
      image:
        type: "string"
      stock:
        type: "integer"
        format: "int32"
  
  MovieResponseArray:
    type: "array"
    items:
      $ref: "#/definitions/MovieResponse"

  CreateUserRequest:
    type: "object"
    properties:
      name:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      pass:
        type: "string"

  UserLogin:
    type: "object"
    properties:
      email:
        type: "string"
      pass:
        type: "string"

  ActorResponse:
    type: "object"
    properties:
      actor_id: 
        type: "number"
      first_name:
        type: "string"
      last_name:
        type: "string"

  ActorResponseArray:
    type: "array"
    items:
      $ref: "#/definitions/ActorResponse"

  UsersResponse:
    type: "object"
    properties:
      user_id: 
        type: "number"
      name: 
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      permission:
        type: "string"

  UsersResponseArray:
    type: "array"
    items:
      $ref: "#/definitions/UsersResponse"

  UpdatePermissionRequest:
    type: "object"
    properties:
      user_id:
        type: "integer"
      permission:
        type: "string"

  CreateMovieRequest:
    type: "object"
    properties:
      title:
        type: "string"
      description:
        type: "string"
        default: "null"
      release_year:
        type: "number"
        default: "null"
      cost:
        type: "number"
      stock:
        type: "integer"
      rating_id:
        type: "integer"
      genre_id:
        type: "integer"
      image_link:
        type: "string"
        default: "null"

  UpdateMovieRequest:
    type: "object"
    properties:
      title:
        type: "string"
        default: "null"
      description:
        type: "string"
        default: "null"
      release_year:
        type: "number"
        default: "null"
      cost:
        type: "number"
        default: "null"
      stock:
        type: "integer"
        default: "null"
      rating_id:
        type: "integer"
        default: "null"
      genre_id:
        type: "integer"
        default: "null"
      image_link:
        type: "string"
        default: "null"

  GenreResponse:
    type: "object"
    properties:
      genre_id:
        type: "integer"
        format: "int32"
      description:
        type: "string"

  GenreResponseArray:
    type: "array"
    items:
      $ref: "#/definitions/GenreResponse"
